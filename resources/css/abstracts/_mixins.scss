@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "variables";

//
//    Mixins
/////////////////////////////////

// Input Placeholder
// --------------------------------------------------
@mixin placeholder($color: #999, $text-indent: 0) {

    &::-webkit-input-placeholder {
        // WebKit browsers
        text-indent: $text-indent;
        color: $color;
    }
    &:-moz-placeholder {
        // Mozilla Firefox 4 to 18
        color: $color;
    }
    &::-moz-placeholder {
        // Mozilla Firefox 19+
        color: $color;
    }
    &:-ms-input-placeholder {
        // Internet Explorer 10+
        color: $color;
    }
  }
  
  // Font rem units with pixel fallback
  @mixin fz ($size: 2.1, $use_family: false, $font_family: '') {
    font-size: $size*10px;
    font-size: $size*1rem;
    @if $use_family==true {
        font-family: $font_family;
    }
  }
  // Ex: @include fz(1.6);
  
  @mixin lh ($size: 2.1) {
    line-height: $size*10px;
    line-height: $size*1rem;
  }
  // Ex: @include lh(1.8);
  // .end rem
  
  
  // Simple mobile first media queries
  @mixin mq($canvas) {
    @if $canvas==iphone6 {
        @media only screen and (min-width: variables.$screen-iphone6) {
            @content;
        }
    }
    @else if $canvas==iphone6p {
        @media only screen and (min-width:variables.$screen-iphone6p) {
            @content;
        }
    }
    @else if $canvas==xs {
        @media only screen and (min-width: variables.$screen-xs) {
            @content;
        }
    }
    @else if $canvas==sm {
        @media only screen and (min-width: variables.$screen-sm) {
            @content;
        }
    }
    @else if $canvas==md {
        @media only screen and (min-width: variables.$screen-md) {
            @content;
        }
    }
    @else if $canvas==lg {
        @media only screen and (min-width: variables.$screen-lg) {
            @content;
        }
    }
    @else if $canvas==xlg {
        @media only screen and (min-width: variables.$screen-xlg) {
            @content;
        }
    }
    @else if $canvas==xxlg {
        @media only screen and (min-width: variables.$screen-xxlg) {
            @content;
        }
    }
  }
  // Ex: @include mq(sm);
  
  // Simple desktop first media queries
  @mixin mq-max($canvas) {
    @if $canvas==xs {
        @media only screen and (max-width: (variables.$screen-xs - 1)) {
            @content;
        }
    }
    @else if $canvas==sm {
        @media only screen and (max-width: (variables.$screen-sm - 1)) {
            @content;
        }
    }
    @else if $canvas==md {
        @media only screen and (max-width: (variables.$screen-md - 1)) {
            @content;
        }
    }
    @else if $canvas==lg {
        @media only screen and (max-width: (variables.$screen-lg - 1)) {
            @content;
        }
    }
    @else if $canvas==xlg {
        @media only screen and (max-width: (variables.$screen-xlg - 1)) {
            @content;
        }
    }
    @else if $canvas==xxlg {
        @media only screen and (max-width: (variables.$screen-xxlg - 1)) {
            @content;
        }
    }
  }
  // Ex: @include mq(sm);
  
  
  // Clearfix
  //
  // For modern browsers
  // 1. The space content is one way to avoid an Opera bug when the
  //    contenteditable attribute is included anywhere else in the document.
  //    Otherwise it causes space to appear at the top and bottom of elements
  //    that are clearfixed.
  // 2. The use of `table` rather than `block` is only necessary if using
  //    `:before` to contain the top-margins of child elements.
  //
  // Source: http://nicolasgallagher.com/micro-clearfix-hack/
  @mixin clearfix() {
    &:before,
    &:after {
        content: " "; // 1
        display: table; // 2
    }
    &:after {
        clear: both;
    }
  }
  
  // Responsive utilities
  
  //
  // More easily include all the states for responsive-utilities.less.
  // [converter] $parent hack
  @mixin responsive-visibility($parent) {
    #{$parent} {
        display: block !important;
    }
    table#{$parent} {
        display: table !important;
    }
    tr#{$parent} {
        display: table-row !important;
    }
    th#{$parent},
    td#{$parent} {
        display: table-cell !important;
    }
  }
  
  @mixin responsive-invisibility($parent) {
    #{$parent} {
        display: none !important;
    }
  }
  
  
  // Text hide
  @mixin text-hide() {
    font: 0/0 a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
  }
  
  
  // Animation
  // --------------------------------------------------
  
  @mixin slide-up-in($value) {
    from {
        opacity: 0;
        transform: translateY($value);
    }
  
    to {
        opacity: 1;
        transform: translateY(0);
    }
  }
  
  @mixin slide-up-out($value) {
    from {
        opacity: 1;
        transform: translateY(0);
    }
  
    to {
        opacity: 0;
        transform: translateY(-$value);
    }
  }
  
  @mixin slide-down-out($value) {
    from {
        opacity: 1;
        transform: translateY(0);
    }
  
    to {
        opacity: 0;
        transform: translateY($value);
    }
  }
  
  @mixin slide-down-in($value) {
    from {
        opacity: 0;
        transform: translateY(-$value);
    }
  
    to {
        opacity: 1;
        transform: translateY(0);
    }
  }
  
  @mixin fade-in($value) {
    from {
        opacity: 0;
    }
  
    to {
        opacity: $value;
    }
  }
  
  @mixin fade-out($value) {
    from {
        opacity: $value;
    }
  
    to {
        opacity: 0;
    }
  }
  
  @mixin aside-enter-right($value) {
    from {
        transform: translateX($value);
    }
    to {
        transform: translateX(0);
    }
  }
  
  @mixin aside-leave-right($value) {
    from {
        transform: translateX(0);
    }
    to {
        transform: translateX($value);
    }
  }
  
  
  /// Event wrapper
  /// @author Harry Roberts
  /// @param {Bool} $self [false] - Whether or not to include current selector
  /// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
  @mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
  }
  
  
  /// Pseudo selector most common properties
  /// @param {String} $display
  /// @param {String} $pos
  /// @param {String} $content
  @mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
  }
  
  
  /// Truncate an element showing ellipsis
  /// @param {Number} $max-width
  @mixin truncate($max-width) {
    max-width: $max-width;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  /// Makes an element unselectable
  @mixin unselectable {
    -webkit-touch-callout: none;
    user-select: none;
  }
  
  
  /// Makes an element non clickable
  @mixin unclickable {
    pointer-events: none;
  }
  
  
  /// Fluid properties
  /// @author Steve Rose @pixelpp
  /// @param {String} $property
  /// @param {Number} $min
  /// @param {Number} $max
  /// @param {Number} $start
  /// @param {Number} $end
  /// @param {Bool} $clip
  /// @param {Bool} $clipAtStart
  /// @param {Bool} $clipAtEnd
  /// @link http://www.adrenalinmedia.com.au/the-agency/insights/this-changes-everything-css-fluid-properties.aspx Explanatory post by Steve Rose
  @mixin fp($property, $min, $max, $start: 320, $end: $screen-xlg-min, $clip: true, $clipAtStart: true, $clipAtEnd: true) {
   $start: $start / ($start * 0 + 1);
   $end: $end / ($end * 0 + 1);
   $multiplier: ($max - $min) / ($end - $start) * 100;
   $adder: ($min * $end - $max * $start) / ($end - $start);
   $formula: calc(#{$multiplier + 0vw} + #{$adder + 0px});
   @if $clip and $clipAtStart {
       @media (max-width: #{$start + 0px}) {
           #{$property}: $min + 0px;
       }
   }
   @if $clip and $clipAtEnd {
       @media (min-width: #{$end + 0px}) {
           #{$property}: $max + 0px;
       }
   }
   #{$property}: $formula;
  }
  
  
  /// Make a context based selector a little more friendly
  /// @author Hugo Giraudel
  /// @param {String} $context
  @mixin when-inside($context) {
    #{$context} & {
        @content;
    }
  }
  
  
  /// Responsive manager
  /// @param {String} $breakpoint - Breakpoint
  /// @requires $breakpoints
  /// @link http://sass-guidelin.es/#breakpoint-manager Sass Guidelines - Breakpoint Manager
  @mixin responsive($breakpoint) {
    $query: map.get($breakpoints, $breakpoint);
  
    @if not $query {
        @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
    }
  
    @media #{if(meta.type-of($query) == 'string', string.unquote($query), meta.inspect($query))} {
        @content;
    }
  }
  
  
  /// Transform pixel font-size to em to avoid manual calculating
  /// @author Aarón García
  /// @param {Pixels} $size
  @mixin px-to-em($size) {
    font-size: ($size/variables.$font-size-base)+em;
  }
  
